version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  # Caching
  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data

  # Message Brokers
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # Monitoring & Logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    ports:
      - "${KIBANA_PORT}:5601"
    depends_on:
      - elasticsearch

  # API Gateway
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway

  # Microservices
  api-gateway:
    build:
      context: .
      dockerfile: ./infrastructure/docker/gateway.Dockerfile
    ports:
      - "${PORT}:3000"
    depends_on:
      - auth-service
      - user-service
      - product-service
      - order-service

  auth-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/auth-service.Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT}:3001"
    depends_on:
      - postgres
      - redis
      - rabbitmq

  user-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/user-service.Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:3002"
    depends_on:
      - postgres
      - redis
      - rabbitmq

  product-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/product-service.Dockerfile
    ports:
      - "${PRODUCT_SERVICE_PORT}:3003"
    depends_on:
      - mongodb
      - redis
      - rabbitmq

  order-service:
    build:
      context: .
      dockerfile: ./infrastructure/docker/order-service.Dockerfile
    ports:
      - "${ORDER_SERVICE_PORT}:3004"
    depends_on:
      - postgres
      - mongodb
      - redis
      - rabbitmq
      - kafka

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data: 